<?php

//Defining constants so code is clearer
#namespace ? {
    const DB_DSN = 'mysql:host=localhost;dbname=libraryapp';
    const DB_USER = 'root';
    const DB_PASS = '';
    const UploadKey = 'avatar';
    const AllowedTypes = ['image/jpeg','image/jpg','image/bmp','image/png'];
         
    #use const ?\UploadKey;
    #use const ?\AllowedTypes;
    
    spl_autoload_register(function($Name) { #detects full pathname of class and then searches in equivalent file structure to include file
        $filePath = "$Name.php";
        $macFilePath = str_replace('\\', '/', $filePath);
        require_once '../' . $macFilePath;   
    });

    use Models\ {Customer};

#Session started for storing user details and detabase connected to
    session_start();
    
    try{
        $conn=new PDO(DB_DSN,DB_USER,DB_PASS,array(PDO::ATTR_ERRMODE=>PDO::ERRMODE_EXCEPTION));
        echo "Connected successfully";
    } catch(PDOException $e){
    die("Connection failed: ".$e->getMessage());# Ideally would not die but redirect to another page/part of script
    }



##PROCESSING FORM

#Take user text input, sanitize, and store in an object
    $customerDetails = filter_input_array(INPUT_POST);
    function filterInput($inputItem) {
                return filter_input(INPUT_POST,$inputItem,FILTER_SANITIZE_STRING,FILTER_FLAG_STRIP_HIGH);
            }
            
    if(!empty($customerDetails)){
                    
        #First sanitize
        foreach($customerDetails as $customerDetail => $customerValue) {
            ${$customerDetail} = filterInput($customerDetail);
        }
        $email=filter_var($email, FILTER_SANITIZE_EMAIL);#additional filter for email
          
        #Then generate random customerID here - temporary - will be generated by database in the future
        $customerID= rand(000, 1000);
        
        #Then create a new customer object ->may want to change class in line with database fields at later point
        $newCustomer= new Customer($customerID, $firstname, $secondname, $lastname, $addressnumber, $addressroad,$city,$postcode
                , $email, $username, $password, 'libraryuser', date("Y/m/d"));
        
        #Add to database
            
        $searchUsersql="SELECT * FROM librarycardholder where Username = ':username';";
        $searchPostcodesql="SELECT * FROM postcode where Postcode = ':postcode';";
        $addPostcodesql="INSERT INTO postcode(Postcode) VALUES (:postcode);";
        
        
        try {
            $stmt=$conn->prepare($searchUsersql); //Search to see if username already exists
            $stmt->execute(['username' => $newCustomer->getUsername()]) ;
        
            If ($user = ($stmt->fetch())){//true if username already exists, must be unique
            header("Location: uploadErrorPage.php"); 
            $_SESSION['uploadError']['errorMessage']="Username already exists, please try another";
            die();
            }
            else {//if user doesn't already exist, we want to add them - need to add data across various tables
                
                $stmtSearchPC=$conn->prepare($searchPostcodesql); //check if postcode exists, if does - fetch ID, if not add to database and fetch ID
                $stmtSearchPC->execute(['postcode' => $newCustomer->getAddressPostcode()]) ;  

                if($rowPC = ($stmtSearchPC->fetch())){
                    $postcodeID=$rowPC['PostcodeID'];
                }
                else{
                    $stmtAddPC=$conn->prepare($addPostcodesql);
                    if ($stmtAddPC->execute(['postcode' => $newCustomer->getAddressPostcode()]))
                        {
                        echo $conn->lastInsertId();
                        }; 
                    #NEED TO RETURN ID SO CAN USE AGAIN - THEN CONTINUE WITH REST OF ADDRESS AND CUSTOMER DATA - last insert not wprking?
                }
            }
        }
        catch (PDOException $e){
            echo "Error: ".$e->getMessage();#placeholder for now, better error handling required
            die();
        }
            
        $_SESSION['userDetails']['username'] = $newCustomer->getUsername(); #Will want to store this in database in future iterations, not cookie
        $_SESSION['userDetails']['customerID'] = $newCustomer->getCustomerID(); #Will want to store this in database in future iterations, not cookie
    }
        

##Now HANDLE UPLOADED AVATAR - checks no errors and stores in AvatarUploads folder
    
#Error checking

    if (empty($_FILES[UploadKey]['name'])){
        header("Location: uploadErrorPage.php"); 
        $_SESSION['uploadError']['errorMessage']="You forgot to add your file!";//stored error message in a storage file so that available to other php pages
        die();
    }

    if ($_FILES[UploadKey]['error'] == (1||2)) {     
        header("Location: uploadErrorPage.php"); 
        $_SESSION['uploadError']['errorMessage']="Your file is too big for us to handle, awkward! Please choose a file under 10MB.";//stored error message in a storage file so that available to other php pages
        die();
    }
    
    if (!in_array($_FILES[UploadKey]['type'],AllowedTypes)){
        header("Location: uploadErrorPage.php"); 
        $_SESSION['uploadError']['errorMessage']="We only accept .JPEG .PNG and .BMP files I'm afraid";//stored error message in a storage file so that available to other php pages
        die();
    }
        
    if ($_FILES[UploadKey]['error']>0){
        header("Location: uploadErrorPage.php"); 
        $_SESSION['uploadError']['errorMessage']="Unfortunately there's been an error with the uploading process";//stored error message in a storage file so that available to other php pages
        die();
    }
    

#Moving the file and ensuring deleted from temporary location
    
    $tempFileLoc = $_FILES[UploadKey]['tmp_name']; //Temporary file path if file passes above checks
    $destFileLoc = 'avatarUploads/'.$customerID.'_'.$_FILES[UploadKey]['name']; // Create file path for uploaded image
    
    
    if(!move_uploaded_file($tempFileLoc, $destFileLoc)){//trys to move, if successful returns true therefore if failed, ! would make true and get error statement
        header("Location: uploadErrorPage.php"); 
        $_SESSION['uploadError']['errorMessage']= "There's been an error with the uploading process";
        die();
    }
    else {
        unset($_SESSION['uploadError']['errorMessage']);
        $newCustomer->setAvatarFilePath($destFileLoc);
        $_SESSION['userDetails']['avatarLocation']=$newCustomer->getAvatarFilePath();//File path stored in cookie (will need changing to db) for use in profile page
        header("Location: profilePage.php");
        
    }

    if (file_exists($tempFileLoc)){
        unlink($tempFileLoc);
    }

    #}//closure of namespace

    
    
    
    
    
//Try and catch exceptions
        
//  class customException extends Exception {
//  public function errorMessage() {
//    //error message
//    $errorMessage = 'Error on line '.$this->getLine().' and '.$this->getMessage().'</b> is not a valid E-Mail address';
//    return $errorMessage;
//  }
//}
//    
//    try {
//    if(empty($_FILES[UploadKey]['name'])){//trys to move, if successful returns true therefore if failed, ! would make true and get error statement
//            throw new Exception("You have not added a file");
//        }
//    if(!in_array($_FILES[UploadKey]['type'],AllowedTypes)){//trys to move, if successful returns true therefore if failed, ! would make true and get error statement
//            throw new Exception("There's been an error with the type of file");
//        }
//    }
//         
//
//    catch (Exception $e) {
//            echo $e->getMessage();
//        }
//    catch (customException $e) {
//    echo $e->errorMessage();
//    }
        
        
        
        #OLD CODE
//        Replaced by for eachloop
//        $firstname = filter_input(INPUT_POST,'firstname',FILTER_SANITIZE_STRING,FILTER_FLAG_STRIP_HIGH);//Remove all HTML tags from a string plus ASCI>127
//        $secondname = filter_input(INPUT_POST,'secondname',FILTER_SANITIZE_STRING,FILTER_FLAG_STRIP_HIGH);
//        $lastname   = filter_input(INPUT_POST,'lastname',FILTER_SANITIZE_STRING,FILTER_FLAG_STRIP_HIGH);
//        $addresslineone   = filter_input(INPUT_POST,'addresslineone',FILTER_SANITIZE_STRING,FILTER_FLAG_STRIP_HIGH);
//        $addresslinetwo   = filter_input(INPUT_POST,'addresslinetwo',FILTER_SANITIZE_STRING,FILTER_FLAG_STRIP_HIGH);
//        $city   = filter_input(INPUT_POST,'city',FILTER_SANITIZE_STRING,FILTER_FLAG_STRIP_HIGH);
//        $postcode = filter_input(INPUT_POST,'postcode',FILTER_SANITIZE_STRING,FILTER_FLAG_STRIP_HIGH);
//        $username= filter_input(INPUT_POST,'username',FILTER_SANITIZE_STRING,FILTER_FLAG_STRIP_HIGH);
//        $password = filter_input(INPUT_POST,'password',FILTER_SANITIZE_STRING,FILTER_FLAG_STRIP_HIGH);
        